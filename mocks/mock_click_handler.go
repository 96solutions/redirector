// Code generated by MockGen. DO NOT EDIT.
// Source: domain/interactor/click_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/lroman242/redirector/domain/entity"
)

// MockClickHandlerInterface is a mock of ClickHandlerInterface interface.
type MockClickHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClickHandlerInterfaceMockRecorder
}

// MockClickHandlerInterfaceMockRecorder is the mock recorder for MockClickHandlerInterface.
type MockClickHandlerInterfaceMockRecorder struct {
	mock *MockClickHandlerInterface
}

// NewMockClickHandlerInterface creates a new mock instance.
func NewMockClickHandlerInterface(ctrl *gomock.Controller) *MockClickHandlerInterface {
	mock := &MockClickHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockClickHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClickHandlerInterface) EXPECT() *MockClickHandlerInterfaceMockRecorder {
	return m.recorder
}

// HandleClick mocks base method.
func (m *MockClickHandlerInterface) HandleClick(ctx context.Context, click *entity.Click) <-chan *clickProcessingResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleClick", ctx, click)
	ret0, _ := ret[0].(<-chan *clickProcessingResult)
	return ret0
}

// HandleClick indicates an expected call of HandleClick.
func (mr *MockClickHandlerInterfaceMockRecorder) HandleClick(ctx, click interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleClick", reflect.TypeOf((*MockClickHandlerInterface)(nil).HandleClick), ctx, click)
}
