// Code generated by MockGen. DO NOT EDIT.
// Source: domain/interactor/redirect_interactor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/lroman242/redirector/domain/dto"
)

// MockRedirectInteractor is a mock of RedirectInteractor interface.
type MockRedirectInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockRedirectInteractorMockRecorder
}

// MockRedirectInteractorMockRecorder is the mock recorder for MockRedirectInteractor.
type MockRedirectInteractorMockRecorder struct {
	mock *MockRedirectInteractor
}

// NewMockRedirectInteractor creates a new mock instance.
func NewMockRedirectInteractor(ctrl *gomock.Controller) *MockRedirectInteractor {
	mock := &MockRedirectInteractor{ctrl: ctrl}
	mock.recorder = &MockRedirectInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedirectInteractor) EXPECT() *MockRedirectInteractorMockRecorder {
	return m.recorder
}

// Redirect mocks base method.
func (m *MockRedirectInteractor) Redirect(ctx context.Context, slug string, requestData *dto.RedirectRequestData) (*dto.RedirectResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redirect", ctx, slug, requestData)
	ret0, _ := ret[0].(*dto.RedirectResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redirect indicates an expected call of Redirect.
func (mr *MockRedirectInteractorMockRecorder) Redirect(ctx, slug, requestData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockRedirectInteractor)(nil).Redirect), ctx, slug, requestData)
}
