// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/clicks_repository.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_clicks_repository.go -source=domain/repository/clicks_repository.go ClicksRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/lroman242/redirector/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockClicksRepository is a mock of ClicksRepository interface.
type MockClicksRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClicksRepositoryMockRecorder
	isgomock struct{}
}

// MockClicksRepositoryMockRecorder is the mock recorder for MockClicksRepository.
type MockClicksRepositoryMockRecorder struct {
	mock *MockClicksRepository
}

// NewMockClicksRepository creates a new mock instance.
func NewMockClicksRepository(ctrl *gomock.Controller) *MockClicksRepository {
	mock := &MockClicksRepository{ctrl: ctrl}
	mock.recorder = &MockClicksRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClicksRepository) EXPECT() *MockClicksRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockClicksRepository) Save(ctx context.Context, click *entity.Click) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, click)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockClicksRepositoryMockRecorder) Save(ctx, click any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockClicksRepository)(nil).Save), ctx, click)
}
