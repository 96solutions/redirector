// Code generated by MockGen. DO NOT EDIT.
// Source: domain/service/ip_address_parser.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_ip_address_parser.go -source=domain/service/ip_address_parser.go IPAddressParserInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIPAddressParserInterface is a mock of IPAddressParserInterface interface.
type MockIPAddressParserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIPAddressParserInterfaceMockRecorder
	isgomock struct{}
}

// MockIPAddressParserInterfaceMockRecorder is the mock recorder for MockIPAddressParserInterface.
type MockIPAddressParserInterfaceMockRecorder struct {
	mock *MockIPAddressParserInterface
}

// NewMockIPAddressParserInterface creates a new mock instance.
func NewMockIPAddressParserInterface(ctrl *gomock.Controller) *MockIPAddressParserInterface {
	mock := &MockIPAddressParserInterface{ctrl: ctrl}
	mock.recorder = &MockIPAddressParserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPAddressParserInterface) EXPECT() *MockIPAddressParserInterfaceMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockIPAddressParserInterface) Parse(ip net.IP) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", ip)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockIPAddressParserInterfaceMockRecorder) Parse(ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockIPAddressParserInterface)(nil).Parse), ip)
}
