// Code generated by MockGen. DO NOT EDIT.
// Source: domain/service/ip_address_parser.go

// Package mocks is a generated GoMock package.
package mocks

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIpAddressParserInterface is a mock of IpAddressParserInterface interface.
type MockIpAddressParserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIpAddressParserInterfaceMockRecorder
}

// MockIpAddressParserInterfaceMockRecorder is the mock recorder for MockIpAddressParserInterface.
type MockIpAddressParserInterfaceMockRecorder struct {
	mock *MockIpAddressParserInterface
}

// NewMockIpAddressParserInterface creates a new mock instance.
func NewMockIpAddressParserInterface(ctrl *gomock.Controller) *MockIpAddressParserInterface {
	mock := &MockIpAddressParserInterface{ctrl: ctrl}
	mock.recorder = &MockIpAddressParserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIpAddressParserInterface) EXPECT() *MockIpAddressParserInterfaceMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockIpAddressParserInterface) Parse(ip net.IP) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", ip)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockIpAddressParserInterfaceMockRecorder) Parse(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockIpAddressParserInterface)(nil).Parse), ip)
}
