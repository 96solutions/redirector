// Code generated by MockGen. DO NOT EDIT.
// Source: domain/service/user_agent_parser.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "github.com/lroman242/redirector/domain/valueobject"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserAgentParser is a mock of UserAgentParser interface.
type MockUserAgentParser struct {
	ctrl     *gomock.Controller
	recorder *MockUserAgentParserMockRecorder
}

// MockUserAgentParserMockRecorder is the mock recorder for MockUserAgentParser.
type MockUserAgentParserMockRecorder struct {
	mock *MockUserAgentParser
}

// NewMockUserAgentParser creates a new mock instance.
func NewMockUserAgentParser(ctrl *gomock.Controller) *MockUserAgentParser {
	mock := &MockUserAgentParser{ctrl: ctrl}
	mock.recorder = &MockUserAgentParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAgentParser) EXPECT() *MockUserAgentParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockUserAgentParser) Parse(userAgent string) (*entity.UserAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", userAgent)
	ret0, _ := ret[0].(*entity.UserAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockUserAgentParserMockRecorder) Parse(userAgent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockUserAgentParser)(nil).Parse), userAgent)
}
