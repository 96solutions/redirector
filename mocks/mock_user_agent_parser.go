// Code generated by MockGen. DO NOT EDIT.
// Source: domain/service/user_agent_parser.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_user_agent_parser.go -source=domain/service/user_agent_parser.go UserAgentParser
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	valueobject "github.com/lroman242/redirector/domain/valueobject"
	gomock "go.uber.org/mock/gomock"
)

// MockUserAgentParserInterface is a mock of UserAgentParserInterface interface.
type MockUserAgentParserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserAgentParserInterfaceMockRecorder
	isgomock struct{}
}

// MockUserAgentParserInterfaceMockRecorder is the mock recorder for MockUserAgentParserInterface.
type MockUserAgentParserInterfaceMockRecorder struct {
	mock *MockUserAgentParserInterface
}

// NewMockUserAgentParserInterface creates a new mock instance.
func NewMockUserAgentParserInterface(ctrl *gomock.Controller) *MockUserAgentParserInterface {
	mock := &MockUserAgentParserInterface{ctrl: ctrl}
	mock.recorder = &MockUserAgentParserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAgentParserInterface) EXPECT() *MockUserAgentParserInterfaceMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockUserAgentParserInterface) Parse(userAgent string) (*valueobject.UserAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", userAgent)
	ret0, _ := ret[0].(*valueobject.UserAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockUserAgentParserInterfaceMockRecorder) Parse(userAgent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockUserAgentParserInterface)(nil).Parse), userAgent)
}
